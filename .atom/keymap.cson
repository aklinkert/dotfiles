# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts. Unlike style sheets however,
# each selector can only be declared once.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:newline'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# * https://atom.io/docs/latest/using-atom-basic-customization#customizing-key-bindings
# * https://atom.io/docs/latest/behind-atom-keymaps-in-depth
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson

'atom-text-editor':
  'f5': 'runner:run'

'.platform-darwin atom-workspace atom-text-editor:not([mini])':
  'alt-cmd-down': 'editor:duplicate-lines'
  'cmd-shift-X': 'editor:delete-line'
  'alt-down': 'editor:move-line-down'
  'alt-up': 'editor:move-line-up'
  'shift-cmd-d': 'find-and-replace:select-undo'
  'cmd--': 'editor:toggle-line-comments'

'.platform-linux atom-workspace atom-text-editor:not([mini])':
  'ctrl-0': 'tree-view:toggle-focus'

'.platform-linux atom-text-editor':
  'ctrl-tab ^ctrl': 'unset!'
  'ctrl-shift-tab ^ctrl': 'unset!'
  'ctrl-tab': 'pane:show-next-item'
  'ctrl-shift-tab': 'pane:show-previous-item'
  'ctrl-alt-right': 'pane:show-next-item'
  'ctrl-alt-left': 'pane:show-previous-item'
  'ctrl--': 'editor:toggle-line-comments'
  'alt-shift-x': 'editor:delete-line'
  'ctrl-shift-d': 'find-and-replace:select-undo'
  'alt-ctrl-down': 'editor:duplicate-lines'
  'alt-down': 'editor:move-line-down'
  'alt-up': 'editor:move-line-up'
